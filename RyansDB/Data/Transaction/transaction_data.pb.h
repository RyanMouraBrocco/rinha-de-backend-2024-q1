// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: transaction_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_transaction_5fdata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_transaction_5fdata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_transaction_5fdata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_transaction_5fdata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_transaction_5fdata_2eproto;
class TransactionData;
class TransactionDataDefaultTypeInternal;
extern TransactionDataDefaultTypeInternal _TransactionData_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TransactionData* Arena::CreateMaybeMessage<::TransactionData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class TransactionData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TransactionData) */ {
 public:
  inline TransactionData() : TransactionData(nullptr) {};
  virtual ~TransactionData();

  TransactionData(const TransactionData& from);
  TransactionData(TransactionData&& from) noexcept
    : TransactionData() {
    *this = ::std::move(from);
  }

  inline TransactionData& operator=(const TransactionData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TransactionData& operator=(TransactionData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TransactionData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TransactionData* internal_default_instance() {
    return reinterpret_cast<const TransactionData*>(
               &_TransactionData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TransactionData& a, TransactionData& b) {
    a.Swap(&b);
  }
  inline void Swap(TransactionData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TransactionData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TransactionData* New() const final {
    return CreateMaybeMessage<TransactionData>(nullptr);
  }

  TransactionData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TransactionData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TransactionData& from);
  void MergeFrom(const TransactionData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TransactionData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TransactionData";
  }
  protected:
  explicit TransactionData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_transaction_5fdata_2eproto);
    return ::descriptor_table_transaction_5fdata_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 3,
    kCreateDateFieldNumber = 4,
    kValueFieldNumber = 1,
    kIsCreditFieldNumber = 2,
  };
  // string description = 3;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.Timestamp createDate = 4;
  bool has_createdate() const;
  private:
  bool _internal_has_createdate() const;
  public:
  void clear_createdate();
  const PROTOBUF_NAMESPACE_ID::Timestamp& createdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_createdate();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_createdate();
  void set_allocated_createdate(PROTOBUF_NAMESPACE_ID::Timestamp* createdate);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_createdate() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_createdate();
  public:
  void unsafe_arena_set_allocated_createdate(
      PROTOBUF_NAMESPACE_ID::Timestamp* createdate);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_createdate();

  // int32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::int32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool isCredit = 2;
  void clear_iscredit();
  bool iscredit() const;
  void set_iscredit(bool value);
  private:
  bool _internal_iscredit() const;
  void _internal_set_iscredit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TransactionData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::Timestamp* createdate_;
  ::PROTOBUF_NAMESPACE_ID::int32 value_;
  bool iscredit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_transaction_5fdata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TransactionData

// int32 value = 1;
inline void TransactionData::clear_value() {
  value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionData::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TransactionData::value() const {
  // @@protoc_insertion_point(field_get:TransactionData.value)
  return _internal_value();
}
inline void TransactionData::_internal_set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  value_ = value;
}
inline void TransactionData::set_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TransactionData.value)
}

// bool isCredit = 2;
inline void TransactionData::clear_iscredit() {
  iscredit_ = false;
}
inline bool TransactionData::_internal_iscredit() const {
  return iscredit_;
}
inline bool TransactionData::iscredit() const {
  // @@protoc_insertion_point(field_get:TransactionData.isCredit)
  return _internal_iscredit();
}
inline void TransactionData::_internal_set_iscredit(bool value) {
  
  iscredit_ = value;
}
inline void TransactionData::set_iscredit(bool value) {
  _internal_set_iscredit(value);
  // @@protoc_insertion_point(field_set:TransactionData.isCredit)
}

// string description = 3;
inline void TransactionData::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TransactionData::description() const {
  // @@protoc_insertion_point(field_get:TransactionData.description)
  return _internal_description();
}
inline void TransactionData::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:TransactionData.description)
}
inline std::string* TransactionData::mutable_description() {
  // @@protoc_insertion_point(field_mutable:TransactionData.description)
  return _internal_mutable_description();
}
inline const std::string& TransactionData::_internal_description() const {
  return description_.Get();
}
inline void TransactionData::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TransactionData::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:TransactionData.description)
}
inline void TransactionData::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:TransactionData.description)
}
inline void TransactionData::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:TransactionData.description)
}
inline std::string* TransactionData::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TransactionData::release_description() {
  // @@protoc_insertion_point(field_release:TransactionData.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TransactionData::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:TransactionData.description)
}
inline std::string* TransactionData::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:TransactionData.description)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TransactionData::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransactionData.description)
}

// .google.protobuf.Timestamp createDate = 4;
inline bool TransactionData::_internal_has_createdate() const {
  return this != internal_default_instance() && createdate_ != nullptr;
}
inline bool TransactionData::has_createdate() const {
  return _internal_has_createdate();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransactionData::_internal_createdate() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = createdate_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& TransactionData::createdate() const {
  // @@protoc_insertion_point(field_get:TransactionData.createDate)
  return _internal_createdate();
}
inline void TransactionData::unsafe_arena_set_allocated_createdate(
    PROTOBUF_NAMESPACE_ID::Timestamp* createdate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdate_);
  }
  createdate_ = createdate;
  if (createdate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TransactionData.createDate)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransactionData::release_createdate() {
  auto temp = unsafe_arena_release_createdate();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransactionData::unsafe_arena_release_createdate() {
  // @@protoc_insertion_point(field_release:TransactionData.createDate)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = createdate_;
  createdate_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransactionData::_internal_mutable_createdate() {
  
  if (createdate_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    createdate_ = p;
  }
  return createdate_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* TransactionData::mutable_createdate() {
  // @@protoc_insertion_point(field_mutable:TransactionData.createDate)
  return _internal_mutable_createdate();
}
inline void TransactionData::set_allocated_createdate(PROTOBUF_NAMESPACE_ID::Timestamp* createdate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdate_);
  }
  if (createdate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(createdate)->GetArena();
    if (message_arena != submessage_arena) {
      createdate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, createdate, submessage_arena);
    }
    
  } else {
    
  }
  createdate_ = createdate;
  // @@protoc_insertion_point(field_set_allocated:TransactionData.createDate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_transaction_5fdata_2eproto
